trigger:
- main

parameters:
- name: buildConfiguration
  type: string
  default: 'Release'

variables:
  - name: DOTNET_NOLOGO
    value: true
    readonly: true
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE 
    value: true
    readonly: true
    #Override to create env variable to have control where the global packages are stored for caching: https://learn.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders
  - name: NUGET_PACKAGES
    value: '$(Pipeline.Workspace)/.nuget/packages/'
    readonly: true

resources:
  containers:
  - container: mssql
    image: mcr.microsoft.com/mssql/server:2022-latest
    env:
      ACCEPT_EULA: Y
      #SA_PASSWORD defined in Build stage
      SA_PASSWORD: $(SA_PASSWORD)
      MSSQL_PID: Developer
    ports: 
      - 1433:1433
    options: --name mssql

jobs: 
- job: Build
  pool:
    vmImage: ubuntu-latest
  
  variables:
  #Used for SQL Server password, placed in variable group. Comment group and uncomment SA_PASSWORD variable
  - name: SA_PASSWORD
    value: 'P2ssw0rdP2ssw0rd!'
    
  services:
    mssql: mssql
        
  steps:
  - task: PowerShell@2
    displayName: 'Determine if dotnet is installed'
    inputs:
      targetType: 'inline'
      script: |
        $installedSdks = dotnet --list-sdks
        $globalJsonLocation = Join-Path -Path "$(System.DefaultWorkingDirectory)" -ChildPath "global.json"
        $globalJson = Get-Content $globalJsonLocation -Raw | ConvertFrom-Json 
        $dotnetVersionGlobalJson = $globalJson.sdk.version
        $match = $installedSdks -like ($dotnetVersionGlobalJson + "*")
        if($match){
          Write-Host "##vso[task.setvariable variable=isDotNetVersionInstalled;]true"
        }
      pwsh: true

  - task: UseDotNet@2
    displayName: 'Install dotnet'
    condition: and(succeeded(), ne(variables['isDotNetVersionInstalled'], 'true'))
    inputs:
      packageType: 'sdk'
      useGlobalJson: true
  
  - task: Cache@2
    displayName: 'Restore cache for NuGet'
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
      path: '$(NUGET_PACKAGES)'
      cacheHitVar: 'CACHE_RESTORED'
         
  - task: DotNetCoreCLI@2
    displayName: Dotnet build
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration ${{parameters.buildConfiguration}}'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'restore'
      workingDirectory: '$(Build.SourcesDirectory)/Infrastructure'
    displayName: 'Restore dotnet tools'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'ef'
      arguments: 'migrations script --output $(Build.ArtifactStagingDirectory)/SQL/db.sql --idempotent --startup-project ..\WorkerService\WorkerService.csproj --context ShowDbContext --no-build --verbose --configuration ${{parameters.buildConfiguration}}'
      workingDirectory: '$(Build.SourcesDirectory)/Infrastructure'
    displayName: 'Create idempotent SQL'

  - script: |
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -Q 'CREATE DATABASE ShowtimeDB' -b
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -i db.sql -d ShowtimeDB -b
    workingDirectory: '$(Build.ArtifactStagingDirectory)/SQL'
    displayName: 'Create database and tables for unit tests'
    timeoutInMinutes: 1
  - task: DotNetCoreCLI@2
    displayName: Dotnet test '**/*Tests.csproj'
    inputs:
      command: 'test'
      projects: '**/*Tests.csproj'
      arguments: '--no-restore --nologo --configuration ${{parameters.buildConfiguration}}'
    env:
      integrationtests_ConnectionStrings__TodoDb: 'Server=127.0.0.1,1433;Database=ShowtimeDB;User Id=SA;Password=$(SA_PASSWORD);TrustServerCertificate=true;'