trigger:
- main

parameters:
- name: buildConfiguration
  type: string
  default: 'Release'

variables:
  - name: DOTNET_NOLOGO
    value: true
    readonly: true
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE 
    value: true
    readonly: true
    #Override to create env variable to have control where the global packages are stored for caching: https://learn.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders
  - name: NUGET_PACKAGES
    value: '$(Pipeline.Workspace)/.nuget/packages/'
    readonly: true

jobs: 
- job: Build
  pool:
    vmImage: windows-latest
        
  steps:
  - task: PowerShell@2
    displayName: 'Determine if dotnet is installed'
    inputs:
      targetType: 'inline'
      script: |
        $installedSdks = dotnet --list-sdks
        $globalJsonLocation = Join-Path -Path "$(System.DefaultWorkingDirectory)" -ChildPath "global.json"
        $globalJson = Get-Content $globalJsonLocation -Raw | ConvertFrom-Json 
        $dotnetVersionGlobalJson = $globalJson.sdk.version
        $match = $installedSdks -like ($dotnetVersionGlobalJson + "*")
        if($match){
          Write-Host "##vso[task.setvariable variable=isDotNetVersionInstalled;]true"
        }
      pwsh: true

  - task: UseDotNet@2
    displayName: 'Install dotnet'
    condition: and(succeeded(), ne(variables['isDotNetVersionInstalled'], 'true'))
    inputs:
      packageType: 'sdk'
      useGlobalJson: true
  
  - task: Cache@2
    displayName: 'Restore cache for NuGet'
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
      path: '$(NUGET_PACKAGES)'
      cacheHitVar: 'CACHE_RESTORED'

  - task: DotNetCoreCLI@2
    displayName: Dotnet restore '**/*.csproj'
    condition: ne(variables.CACHE_RESTORED, true)
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      restoreArguments: '--locked-mode'
      feedsToUse: 'select'
         
  - task: DotNetCoreCLI@2
    displayName: Dotnet build - pipeline cache restored
    condition: eq(variables.CACHE_RESTORED, true)
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration ${{parameters.buildConfiguration}}'
    
  - task: DotNetCoreCLI@2
    displayName: Dotnet build - pipeline cache not restored
    condition: ne(variables.CACHE_RESTORED, true)
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--no-restore --configuration ${{parameters.buildConfiguration}}' 

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'restore'
      workingDirectory: '$(Build.SourcesDirectory)/Infrastructure'
    displayName: 'Restore dotnet tools'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'ef'
      arguments: 'migrations script --output $(Build.ArtifactStagingDirectory)/SQL/db.sql --idempotent --startup-project ../WorkerService/WorkerService.csproj --context ShowDbContext --no-build --verbose --configuration ${{parameters.buildConfiguration}}'
      workingDirectory: '$(Build.SourcesDirectory)/Infrastructure'
    displayName: 'Create idempotent SQL'

  - task: DotNetCoreCLI@2
    displayName: Dotnet test '**/*Tests.csproj'
    inputs:
      command: 'test'
      projects: '**/*Tests.csproj'
      arguments: '--no-restore --nologo --configuration ${{parameters.buildConfiguration}}'